version: 2.1

executors:
  node12:
    docker:
      - image: circleci/node:12
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global
      NODE_ENV: development # Only needed if puppeteer is in `devDependencies`

#parameters:
#  smoke_tests_only:
#    type: boolean
#    default: false
#    description: execute only the smoke tests
#  publish_ci_version:
#    type: string
#    default: ""
#    description: the helix-publish ci version to use
#  version_lock:
#    type: string
#    default: ""
#    description: the version lock string
#
#orbs:
#  puppeteer: threetreeslight/puppeteer@0.1.2
#  helix-gcloud-setup: adobe/helix-gcloud-setup@1.0.0
#
#references:
#  run_smoketests: &run_smoketests
#    executor: node12
#    steps:

commands:
  setup:
    steps:
      - checkout
      - run:
          name: install npm
          command: sudo npm -g install npm
      - run:
          name: Installing Dependencies
          command: npm ci
          working_directory: .tests

jobs:
  build:
    executor: node12
    steps:
      - setup

#
  init_smoketests:
    executor: node12
    steps:
      - setup
#      - run:
#          name: Installing Helix CLI
#          command: npm install @adobe/helix-cli@">=5" --save=false
#
#      - run:
#          name: Prepare packackge secrets
#          command: |
#            echo "ALGOLIA_API_KEY=$ALGOLIA_API_KEY" > .pages-package.env
#            echo "ALGOLIA_APP_ID=$ALGOLIA_APP_ID" >> .pages-package.env
#            echo "AZURE_SEARCH_API_KEY=$AZURE_SEARCH_API_KEY" >> .pages-package.env
#            echo "AZURE_SEARCH_SERVICE_NAME=$AZURE_SEARCH_SERVICE_NAME" >> .pages-package.env
#            echo "CORALOGIX_API_KEY=$CORALOGIX_API_KEY" >> .pages-package.env
#            echo "CORALOGIX_LOG_LEVEL=$CORALOGIX_LOG_LEVEL" >> .pages-package.env
#            echo "EPSAGON_TOKEN=$EPSAGON_TOKEN" >> .pages-package.env
#            echo "HTTP_TIMEOUT_EXTERNAL=30000" >> .pages-package.env
#      - helix-gcloud-setup/load-config
#
#      - run:
#          name: Deploy
#          command: WSK_AUTH=$HLX_WSK_AUTH npm run deploy-ci
#
#      - run:
#          name: Setup branch in helix-config.yaml
#
#          # replace "master" by the branch name in helix-config
#          command: |
#            sed -i -e "s/#master/#$CIRCLE_BRANCH/" helix-config.yaml
#
#      - store_artifacts:
#          path: helix-config.yaml
#
#      - run:
#          name: Compute TEST_DOMAIN and TEST_SERVICE and TEST_VERSION_LOCK
#
#          command: |
#              modulo=$(expr << pipeline.number >> % 7 + 1)
#              name="TEST_DOMAIN_$modulo"
#              TEST_DOMAIN=${!name}
#              name="TEST_SERVICE_$modulo"
#              TEST_SERVICE=${!name}
#              mkdir -p env
#              # "pass" the variable to the next steps...
#              echo "export TEST_DOMAIN=$TEST_DOMAIN" >> env/TEST_DOMAIN
#              echo "export TEST_SERVICE=$TEST_SERVICE" >> env/TEST_SERVICE
#              echo "export TEST_VERSION_LOCK=<< pipeline.parameters.version_lock >>" >> env/TEST_VERSION_LOCK
#
#              cat env/TEST_DOMAIN >> $BASH_ENV
#              cat env/TEST_SERVICE >> $BASH_ENV
#              cat env/TEST_VERSION_LOCK >> $BASH_ENV
#              # debug logs
#              echo "A TEST_DOMAIN has been computed - hlx-$modulo"
#              echo "Using version lock: << pipeline.parameters.version_lock >>"
#      - run:
#          name: Publish to Fastly
#          command: |
#            if [[ $CIRCLE_BRANCH == *"-publish-ci"* ]]; then
#                echo "Using CI Publish"
#                npx hlx publish --purge hard --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE --api-publish  https://adobeioruntime.net/api/v1/web/helix/helix-services/publish@ci 2>&1 | tee publish.out
#            else
#              if [[ ! -z "<< pipeline.parameters.publish_ci_version >>" ]]; then
#                echo "Using CI Publish provided version: << pipeline.parameters.publish_ci_version >>"
#                npx hlx publish --purge hard --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE --api-publish  https://adobeioruntime.net/api/v1/web/helix/helix-services/publish@<< pipeline.parameters.publish_ci_version >> 2>&1 | tee publish.out
#              else
#                echo "Using regular Publish"
#                npx hlx publish --purge hard --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE 2>&1 | tee publish.out
#              fi
#            fi
#
#      - run: mkdir junit
#
#      - run:
#          name: Store Publish Output as junit results
#          command: |
#            if grep "Error" publish.out; then
#              echo '<?xml version="1.0" encoding="UTF-8" ?>'                                           > junit/publish-as-test.xml
#              echo '<testsuites id="publish" name="hlx publish" tests="1" failures="1" time="0.000">' >> junit/publish-as-test.xml
#              echo '<testsuite id="publish1" name="hlx publish" tests="1" failures="1" time="0.001">' >> junit/publish-as-test.xml
#              echo '<testcase id="publish2" name="run hlx publish" time="0.001">'                     >> junit/publish-as-test.xml
#              echo '<failure message="hlx publish failed with error" type="WARNING">'                 >> junit/publish-as-test.xml
#              cat publish.out                                                                         >> junit/publish-as-test.xml
#              echo '</failure>'                                                                       >> junit/publish-as-test.xml
#              echo '</testcase>'                                                                      >> junit/publish-as-test.xml
#              echo '</testsuite>'                                                                     >> junit/publish-as-test.xml
#              echo '</testsuites>'                                                                    >> junit/publish-as-test.xml
#            fi
#      - store_test_results:
#          path: junit
#
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - .npm

#  run_smoketests:
#    executor: node12
#    parameters:
#        owner:
#            type: string
#            description: the owner of the git repo that hosts the "test:hlx.pge.smoketest" tests
#        repo:
#            type: string
#            description: the name of the git repo that hosts the "test:hlx.pge.smoketest" tests
#        branch:
#            type: string
#            default: master
#            description: the branch of the git repo that hosts the "test:hlx.pge.smoketest" tests
#        script:
#            type: string
#            default: test:hlx.pge.smoketest
#            description: the name of the npm script to run
#    steps:
#      - attach_workspace:
#          at: /home/circleci
#
#      - run:
#          name: Load environment variables
#          command: |
#            cat env/TEST_DOMAIN >> $BASH_ENV
#            cat env/TEST_SERVICE >> $BASH_ENV
#            cat env/TEST_VERSION_LOCK >> $BASH_ENV
#
#      - run:
#          name: Cloning << parameters.owner >>/<< parameters.repo >>
#          command: git clone --single-branch --branch << parameters.branch >> --depth 1 https://github.com/<< parameters.owner >>/<< parameters.repo >>
#
#      - run:
#          name: Installing << parameters.repo >>
#          command: npm install
#          working_directory: << parameters.repo >>
#
#      # required by some smoketests (no way to install it via npm only)
#      - puppeteer/install
#
#      - run:
#          name: Run the smoke tests for repo << parameters.repo >>
#          command: >
#            env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml'
#            npm run << parameters.script >> -- --reporter mocha-junit-reporter
#          working_directory: << parameters.repo >>
#
#      - store_test_results:
#          path: junit
#
#      - store_artifacts:
#          path: junit
#
#      - persist_to_workspace:
#          root: /home/circleci
#          paths:
#            - project/junit

  run_generic_smoketests:
    executor: node12
    parameters:
        owner:
            type: string
            description: the owner of the git repo to run the smoke tests against
        repo:
            type: string
            description: the name of the git repo to run the smoke tests against
        branch:
            type: string
            default: master
            description: the branch of the git repo to run the smoke tests against
        index:
            type: string
            default: index.html
            description: the index page to be tested
    steps:
      - attach_workspace:
          at: /home/circleci

#      - run:
#          name: Load environment variables
#          command: |
#            cat env/TEST_DOMAIN >> $BASH_ENV
#            cat env/TEST_SERVICE >> $BASH_ENV
#            cat env/TEST_VERSION_LOCK >> $BASH_ENV

      - run:
          name: Run the smoke tests for << parameters.owner >>/<< parameters.repo >>
          command: >
            env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml'
            TEST_OWNER=<< parameters.owner >>
            TEST_REPO=<< parameters.repo >>
            TEST_BRANCH=<< parameters.branch >>
            TEST_INDEX=<< parameters.index >>
            npm run test -- --reporter mocha-junit-reporter
          working_directory: .tests

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

#      - persist_to_workspace:
#          root: /home/circleci
#          paths:
#            - project/junit

#  finalize_smoketests:
#    executor: node12
#    steps:
#      - attach_workspace:
#          at: /home/circleci
#
#      # group all junit test results in the finalize step
#      - store_test_results:
#          path: junit
#
#      - store_artifacts:
#          path: junit

#
#  run_diff_tests:
#    executor: node12
#    steps:
#      - attach_workspace:
#          at: /home/circleci
#
#      - run:
#          name: Load environment variables
#          command: |
#            cat env/TEST_DOMAIN >> $BASH_ENV
#            cat env/TEST_SERVICE >> $BASH_ENV
#            cat env/TEST_VERSION_LOCK >> $BASH_ENV
#
#      - run:
#          name: Run Helix Page Diff tests
#          command: npm run test:pages -- --reporter mocha-junit-reporter
#          environment:
#              MOCHA_FILE: junit/tests-results-run_diff_tests.xml
#          when: always
#
#      - store_test_results:
#          path: junit
#
#      - store_artifacts:
#          path: junit
#
#      - store_artifacts:
#          path: htmldumps
#
#      - persist_to_workspace:
#          root: /home/circleci
#          paths:
#            - project/junit
#            - project/htmldumps

workflows:
  version: 2
  tests:
    jobs:
    - init_smoketests:
        context: Project Helix
        requires:
            - build
#    - run_generic_smoketests:
#        name: adobe/helix-pages
#        owner: adobe
#        repo: helix-pages
#        branch: $CIRCLE_BRANCH
#        requires:
#            - init_smoketests
#    - run_generic_smoketests:
#        name: adobe/helix-example-basic#test-code
#        owner: adobe
#        repo: helix-example-basic
#        branch: test-code
##        script: test:smoke
#        requires:
#            - init_smoketests
#    - run_generic_smoketests:
#        name: adobe/theblog-tests
#        owner: adobe
#        repo: theblog-tests
#        branch: main
##        script: test:smoke
#        requires:
#            - init_smoketests
    - run_generic_smoketests:
        name: adobe/spark-website
        owner: adobe
        repo: spark-website
        index: express/
        requires:
            - init_smoketests
#    - run_diff_tests:
#        requires:
#            - init_smoketests
#    - finalize_smoketests:
#        requires:
#            - adobe/helix-pages
#            - adobe/helix-example-basic#test-code
#            - adobe/ferrumjsorg
#            - adobe/theblog-tests
#            - run_diff_tests

